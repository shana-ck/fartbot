/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
import crypto from 'crypto';
import { Transform, TransformCallback } from 'stream';
import { CID } from 'multiformats/cid';
import * as Block from 'multiformats/block';
import * as cborCodec from '@ipld/dag-cbor';
export declare const cborEncode: typeof cborCodec.encode;
export declare const cborDecode: typeof cborCodec.decode;
export declare const dataToCborBlock: (data: unknown) => Promise<Block.Block<unknown>>;
export declare const cidForCbor: (data: unknown) => Promise<CID>;
export declare const isValidCid: (cidStr: string) => Promise<boolean>;
export declare const cborBytesToRecord: (bytes: Uint8Array) => Record<string, unknown>;
export declare const verifyCidForBytes: (cid: CID, bytes: Uint8Array) => Promise<void>;
export declare const sha256ToCid: (hash: Uint8Array, codec: number) => CID;
export declare const sha256RawToCid: (hash: Uint8Array) => CID;
export declare class VerifyCidTransform extends Transform {
    cid: CID;
    hasher: crypto.Hash;
    constructor(cid: CID);
    _transform(chunk: Uint8Array, _enc: BufferEncoding, cb: TransformCallback): void;
    _flush(cb: TransformCallback): void;
}
export declare class VerifyCidError extends Error {
    expected: CID;
    actual: CID;
    constructor(expected: CID, actual: CID);
}
