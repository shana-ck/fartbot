import { CID } from 'multiformats/cid';
import { CommitData } from '../types';
import BlockMap from '../block-map';
import ReadableBlockstore from './readable-blockstore';
import { RepoStorage } from './types';
export declare class MemoryBlockstore extends ReadableBlockstore implements RepoStorage {
    blocks: BlockMap;
    root: CID | null;
    rev: string | null;
    constructor(blocks?: BlockMap);
    getRoot(): Promise<CID | null>;
    getBytes(cid: CID): Promise<Uint8Array | null>;
    has(cid: CID): Promise<boolean>;
    getBlocks(cids: CID[]): Promise<{
        blocks: BlockMap;
        missing: CID[];
    }>;
    putBlock(cid: CID, block: Uint8Array): Promise<void>;
    putMany(blocks: BlockMap): Promise<void>;
    updateRoot(cid: CID, rev: string): Promise<void>;
    applyCommit(commit: CommitData): Promise<void>;
    sizeInBytes(): Promise<number>;
    destroy(): Promise<void>;
}
export default MemoryBlockstore;
