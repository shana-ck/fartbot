import { z } from 'zod';
import { CID } from 'multiformats';
import * as car from '@ipld/car/api';
import BlockMap from './block-map';
import { RepoRecord } from '@atproto/lexicon';
import CidSet from './cid-set';
declare const unsignedCommit: z.ZodObject<{
    did: z.ZodString;
    version: z.ZodLiteral<3>;
    data: z.ZodEffects<z.ZodEffects<z.ZodAny, any, any>, CID, any>;
    rev: z.ZodString;
    prev: z.ZodNullable<z.ZodEffects<z.ZodEffects<z.ZodAny, any, any>, CID, any>>;
}, "strip", z.ZodTypeAny, {
    did: string;
    data: CID;
    version: 3;
    rev: string;
    prev: CID | null;
}, {
    did: string;
    version: 3;
    rev: string;
    data?: any;
    prev?: any;
}>;
export type UnsignedCommit = z.infer<typeof unsignedCommit> & {
    sig?: never;
};
declare const commit: z.ZodObject<{
    did: z.ZodString;
    version: z.ZodLiteral<3>;
    data: z.ZodEffects<z.ZodEffects<z.ZodAny, any, any>, CID, any>;
    rev: z.ZodString;
    prev: z.ZodNullable<z.ZodEffects<z.ZodEffects<z.ZodAny, any, any>, CID, any>>;
    sig: z.ZodType<Uint8Array, z.ZodTypeDef, Uint8Array>;
}, "strip", z.ZodTypeAny, {
    did: string;
    data: CID;
    version: 3;
    rev: string;
    prev: CID | null;
    sig: Uint8Array;
}, {
    did: string;
    version: 3;
    rev: string;
    sig: Uint8Array;
    data?: any;
    prev?: any;
}>;
export type Commit = z.infer<typeof commit>;
declare const legacyV2Commit: z.ZodObject<{
    did: z.ZodString;
    version: z.ZodLiteral<2>;
    data: z.ZodEffects<z.ZodEffects<z.ZodAny, any, any>, CID, any>;
    rev: z.ZodOptional<z.ZodString>;
    prev: z.ZodNullable<z.ZodEffects<z.ZodEffects<z.ZodAny, any, any>, CID, any>>;
    sig: z.ZodType<Uint8Array, z.ZodTypeDef, Uint8Array>;
}, "strip", z.ZodTypeAny, {
    did: string;
    data: CID;
    version: 2;
    prev: CID | null;
    sig: Uint8Array;
    rev?: string | undefined;
}, {
    did: string;
    version: 2;
    sig: Uint8Array;
    data?: any;
    rev?: string | undefined;
    prev?: any;
}>;
export type LegacyV2Commit = z.infer<typeof legacyV2Commit>;
declare const versionedCommit: z.ZodDiscriminatedUnion<"version", [z.ZodObject<{
    did: z.ZodString;
    version: z.ZodLiteral<3>;
    data: z.ZodEffects<z.ZodEffects<z.ZodAny, any, any>, CID, any>;
    rev: z.ZodString;
    prev: z.ZodNullable<z.ZodEffects<z.ZodEffects<z.ZodAny, any, any>, CID, any>>;
    sig: z.ZodType<Uint8Array, z.ZodTypeDef, Uint8Array>;
}, "strip", z.ZodTypeAny, {
    did: string;
    data: CID;
    version: 3;
    rev: string;
    prev: CID | null;
    sig: Uint8Array;
}, {
    did: string;
    version: 3;
    rev: string;
    sig: Uint8Array;
    data?: any;
    prev?: any;
}>, z.ZodObject<{
    did: z.ZodString;
    version: z.ZodLiteral<2>;
    data: z.ZodEffects<z.ZodEffects<z.ZodAny, any, any>, CID, any>;
    rev: z.ZodOptional<z.ZodString>;
    prev: z.ZodNullable<z.ZodEffects<z.ZodEffects<z.ZodAny, any, any>, CID, any>>;
    sig: z.ZodType<Uint8Array, z.ZodTypeDef, Uint8Array>;
}, "strip", z.ZodTypeAny, {
    did: string;
    data: CID;
    version: 2;
    prev: CID | null;
    sig: Uint8Array;
    rev?: string | undefined;
}, {
    did: string;
    version: 2;
    sig: Uint8Array;
    data?: any;
    rev?: string | undefined;
    prev?: any;
}>]>;
export type VersionedCommit = z.infer<typeof versionedCommit>;
export declare const schema: {
    commit: z.ZodObject<{
        did: z.ZodString;
        version: z.ZodLiteral<3>;
        data: z.ZodEffects<z.ZodEffects<z.ZodAny, any, any>, CID, any>;
        rev: z.ZodString;
        prev: z.ZodNullable<z.ZodEffects<z.ZodEffects<z.ZodAny, any, any>, CID, any>>;
        sig: z.ZodType<Uint8Array, z.ZodTypeDef, Uint8Array>;
    }, "strip", z.ZodTypeAny, {
        did: string;
        data: CID;
        version: 3;
        rev: string;
        prev: CID | null;
        sig: Uint8Array;
    }, {
        did: string;
        version: 3;
        rev: string;
        sig: Uint8Array;
        data?: any;
        prev?: any;
    }>;
    legacyV2Commit: z.ZodObject<{
        did: z.ZodString;
        version: z.ZodLiteral<2>;
        data: z.ZodEffects<z.ZodEffects<z.ZodAny, any, any>, CID, any>;
        rev: z.ZodOptional<z.ZodString>;
        prev: z.ZodNullable<z.ZodEffects<z.ZodEffects<z.ZodAny, any, any>, CID, any>>;
        sig: z.ZodType<Uint8Array, z.ZodTypeDef, Uint8Array>;
    }, "strip", z.ZodTypeAny, {
        did: string;
        data: CID;
        version: 2;
        prev: CID | null;
        sig: Uint8Array;
        rev?: string | undefined;
    }, {
        did: string;
        version: 2;
        sig: Uint8Array;
        data?: any;
        rev?: string | undefined;
        prev?: any;
    }>;
    versionedCommit: z.ZodDiscriminatedUnion<"version", [z.ZodObject<{
        did: z.ZodString;
        version: z.ZodLiteral<3>;
        data: z.ZodEffects<z.ZodEffects<z.ZodAny, any, any>, CID, any>;
        rev: z.ZodString;
        prev: z.ZodNullable<z.ZodEffects<z.ZodEffects<z.ZodAny, any, any>, CID, any>>;
        sig: z.ZodType<Uint8Array, z.ZodTypeDef, Uint8Array>;
    }, "strip", z.ZodTypeAny, {
        did: string;
        data: CID;
        version: 3;
        rev: string;
        prev: CID | null;
        sig: Uint8Array;
    }, {
        did: string;
        version: 3;
        rev: string;
        sig: Uint8Array;
        data?: any;
        prev?: any;
    }>, z.ZodObject<{
        did: z.ZodString;
        version: z.ZodLiteral<2>;
        data: z.ZodEffects<z.ZodEffects<z.ZodAny, any, any>, CID, any>;
        rev: z.ZodOptional<z.ZodString>;
        prev: z.ZodNullable<z.ZodEffects<z.ZodEffects<z.ZodAny, any, any>, CID, any>>;
        sig: z.ZodType<Uint8Array, z.ZodTypeDef, Uint8Array>;
    }, "strip", z.ZodTypeAny, {
        did: string;
        data: CID;
        version: 2;
        prev: CID | null;
        sig: Uint8Array;
        rev?: string | undefined;
    }, {
        did: string;
        version: 2;
        sig: Uint8Array;
        data?: any;
        rev?: string | undefined;
        prev?: any;
    }>]>;
    cid: z.ZodEffects<z.ZodEffects<z.ZodAny, any, any>, CID, any>;
    bytes: z.ZodType<Uint8Array, z.ZodTypeDef, Uint8Array>;
    string: z.ZodString;
    array: z.ZodArray<z.ZodUnknown, "many">;
    map: z.ZodRecord<z.ZodString, z.ZodUnknown>;
    unknown: z.ZodUnknown;
};
export declare const def: {
    commit: {
        name: string;
        schema: z.ZodObject<{
            did: z.ZodString;
            version: z.ZodLiteral<3>;
            data: z.ZodEffects<z.ZodEffects<z.ZodAny, any, any>, CID, any>;
            rev: z.ZodString;
            prev: z.ZodNullable<z.ZodEffects<z.ZodEffects<z.ZodAny, any, any>, CID, any>>;
            sig: z.ZodType<Uint8Array, z.ZodTypeDef, Uint8Array>;
        }, "strip", z.ZodTypeAny, {
            did: string;
            data: CID;
            version: 3;
            rev: string;
            prev: CID | null;
            sig: Uint8Array;
        }, {
            did: string;
            version: 3;
            rev: string;
            sig: Uint8Array;
            data?: any;
            prev?: any;
        }>;
    };
    versionedCommit: {
        name: string;
        schema: z.ZodDiscriminatedUnion<"version", [z.ZodObject<{
            did: z.ZodString;
            version: z.ZodLiteral<3>;
            data: z.ZodEffects<z.ZodEffects<z.ZodAny, any, any>, CID, any>;
            rev: z.ZodString;
            prev: z.ZodNullable<z.ZodEffects<z.ZodEffects<z.ZodAny, any, any>, CID, any>>;
            sig: z.ZodType<Uint8Array, z.ZodTypeDef, Uint8Array>;
        }, "strip", z.ZodTypeAny, {
            did: string;
            data: CID;
            version: 3;
            rev: string;
            prev: CID | null;
            sig: Uint8Array;
        }, {
            did: string;
            version: 3;
            rev: string;
            sig: Uint8Array;
            data?: any;
            prev?: any;
        }>, z.ZodObject<{
            did: z.ZodString;
            version: z.ZodLiteral<2>;
            data: z.ZodEffects<z.ZodEffects<z.ZodAny, any, any>, CID, any>;
            rev: z.ZodOptional<z.ZodString>;
            prev: z.ZodNullable<z.ZodEffects<z.ZodEffects<z.ZodAny, any, any>, CID, any>>;
            sig: z.ZodType<Uint8Array, z.ZodTypeDef, Uint8Array>;
        }, "strip", z.ZodTypeAny, {
            did: string;
            data: CID;
            version: 2;
            prev: CID | null;
            sig: Uint8Array;
            rev?: string | undefined;
        }, {
            did: string;
            version: 2;
            sig: Uint8Array;
            data?: any;
            rev?: string | undefined;
            prev?: any;
        }>]>;
    };
    cid: import("@atproto/common-web/src/check").Def<CID>;
    bytes: import("@atproto/common-web/src/check").Def<Uint8Array>;
    string: import("@atproto/common-web/src/check").Def<string>;
    map: import("@atproto/common-web/src/check").Def<Record<string, unknown>>;
    unknown: import("@atproto/common-web/src/check").Def<unknown>;
};
export declare enum WriteOpAction {
    Create = "create",
    Update = "update",
    Delete = "delete"
}
export type RecordCreateOp = {
    action: WriteOpAction.Create;
    collection: string;
    rkey: string;
    record: RepoRecord;
};
export type RecordUpdateOp = {
    action: WriteOpAction.Update;
    collection: string;
    rkey: string;
    record: RepoRecord;
};
export type RecordDeleteOp = {
    action: WriteOpAction.Delete;
    collection: string;
    rkey: string;
};
export type RecordWriteOp = RecordCreateOp | RecordUpdateOp | RecordDeleteOp;
export type RecordCreateDescript = {
    action: WriteOpAction.Create;
    collection: string;
    rkey: string;
    cid: CID;
};
export type RecordUpdateDescript = {
    action: WriteOpAction.Update;
    collection: string;
    rkey: string;
    prev: CID;
    cid: CID;
};
export type RecordDeleteDescript = {
    action: WriteOpAction.Delete;
    collection: string;
    rkey: string;
    cid: CID;
};
export type RecordWriteDescript = RecordCreateDescript | RecordUpdateDescript | RecordDeleteDescript;
export type WriteLog = RecordWriteDescript[][];
export type CommitData = {
    cid: CID;
    rev: string;
    since: string | null;
    prev: CID | null;
    newBlocks: BlockMap;
    removedCids: CidSet;
};
export type RepoUpdate = CommitData & {
    ops: RecordWriteOp[];
};
export type CollectionContents = Record<string, RepoRecord>;
export type RepoContents = Record<string, CollectionContents>;
export type RepoRecordWithCid = {
    cid: CID;
    value: RepoRecord;
};
export type CollectionContentsWithCids = Record<string, RepoRecordWithCid>;
export type RepoContentsWithCids = Record<string, CollectionContentsWithCids>;
export type DatastoreContents = Record<string, CID>;
export type RecordPath = {
    collection: string;
    rkey: string;
};
export type RecordClaim = {
    collection: string;
    rkey: string;
    record: RepoRecord | null;
};
export type VerifiedDiff = {
    writes: RecordWriteDescript[];
    commit: CommitData;
};
export type VerifiedRepo = {
    creates: RecordCreateDescript[];
    commit: CommitData;
};
export type CarBlock = car.Block;
export {};
