/// <reference types="node" />
import { CID } from 'multiformats/cid';
import { CarBlockIterator } from '@ipld/car';
import { BlockWriter } from '@ipld/car/writer';
import { LexValue, RepoRecord } from '@atproto/lexicon';
import DataDiff from './data-diff';
import { CarBlock, Commit, LegacyV2Commit, RecordCreateDescript, RecordPath, RecordWriteDescript, UnsignedCommit } from './types';
import BlockMap from './block-map';
import { Keypair } from '@atproto/crypto';
import { Readable } from 'stream';
export declare function verifyIncomingCarBlocks(car: AsyncIterable<CarBlock>): AsyncIterable<CarBlock>;
export declare function writeCarStream(root: CID | null, fn: (car: BlockWriter) => Promise<void>): Readable;
export declare function writeCar(root: CID | null, fn: (car: BlockWriter) => Promise<void>): AsyncIterable<Uint8Array>;
export declare const blocksToCarStream: (root: CID | null, blocks: BlockMap) => AsyncIterable<Uint8Array>;
export declare const blocksToCarFile: (root: CID | null, blocks: BlockMap) => Promise<Uint8Array>;
export declare const carToBlocks: (car: CarBlockIterator) => Promise<{
    roots: CID[];
    blocks: BlockMap;
}>;
export declare const readCar: (bytes: Uint8Array) => Promise<{
    roots: CID[];
    blocks: BlockMap;
}>;
export declare const readCarStream: (stream: AsyncIterable<Uint8Array>) => Promise<{
    roots: CID[];
    blocks: BlockMap;
}>;
export declare const readCarWithRoot: (bytes: Uint8Array) => Promise<{
    root: CID;
    blocks: BlockMap;
}>;
export declare const diffToWriteDescripts: (diff: DataDiff) => Promise<RecordWriteDescript[]>;
export declare const ensureCreates: (descripts: RecordWriteDescript[]) => RecordCreateDescript[];
export declare const parseDataKey: (key: string) => RecordPath;
export declare const formatDataKey: (collection: string, rkey: string) => string;
export declare const metaEqual: (a: Commit, b: Commit) => boolean;
export declare const signCommit: (unsigned: UnsignedCommit, keypair: Keypair) => Promise<Commit>;
export declare const verifyCommitSig: (commit: Commit, didKey: string) => Promise<boolean>;
export declare const cborToLex: (val: Uint8Array) => LexValue;
export declare const cborToLexRecord: (val: Uint8Array) => RepoRecord;
export declare const cidForRecord: (val: LexValue) => Promise<CID>;
export declare const ensureV3Commit: (commit: LegacyV2Commit | Commit) => Commit;
