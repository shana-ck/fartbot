import express, { NextFunction, RequestHandler } from 'express';
import { LexiconDoc, Lexicons, LexXrpcProcedure, LexXrpcQuery, LexXrpcSubscription } from '@atproto/lexicon';
import { XrpcStreamServer } from './stream';
import { XRPCHandler, XRPCHandlerConfig, Options, XRPCStreamHandlerConfig, XRPCStreamHandler, RateLimiterI, RateLimiterConsume } from './types';
export declare function createServer(lexicons?: LexiconDoc[], options?: Options): Server;
export declare class Server {
    router: import("express-serve-static-core").Express;
    routes: import("express-serve-static-core").Router;
    subscriptions: Map<string, XrpcStreamServer>;
    lex: Lexicons;
    options: Options;
    middleware: Record<'json' | 'text', RequestHandler>;
    globalRateLimiters: RateLimiterI[];
    sharedRateLimiters: Record<string, RateLimiterI>;
    routeRateLimiterFns: Record<string, RateLimiterConsume[]>;
    constructor(lexicons?: LexiconDoc[], opts?: Options);
    method(nsid: string, configOrFn: XRPCHandlerConfig | XRPCHandler): void;
    addMethod(nsid: string, configOrFn: XRPCHandlerConfig | XRPCHandler): void;
    streamMethod(nsid: string, configOrFn: XRPCStreamHandlerConfig | XRPCStreamHandler): void;
    addStreamMethod(nsid: string, configOrFn: XRPCStreamHandlerConfig | XRPCStreamHandler): void;
    addLexicon(doc: LexiconDoc): void;
    addLexicons(docs: LexiconDoc[]): void;
    protected addRoute(nsid: string, def: LexXrpcQuery | LexXrpcProcedure, config: XRPCHandlerConfig): Promise<void>;
    catchall(req: express.Request, _res: express.Response, next: NextFunction): Promise<void>;
    createHandler(nsid: string, def: LexXrpcQuery | LexXrpcProcedure, routeCfg: XRPCHandlerConfig): RequestHandler;
    protected addSubscription(nsid: string, def: LexXrpcSubscription, config: XRPCStreamHandlerConfig): Promise<void>;
    private enableStreamingOnListen;
    private setupRouteRateLimits;
}
