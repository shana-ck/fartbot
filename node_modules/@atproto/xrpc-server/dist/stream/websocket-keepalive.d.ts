import { WebSocket, ClientOptions } from 'ws';
export declare class WebSocketKeepAlive {
    opts: ClientOptions & {
        getUrl: () => Promise<string>;
        maxReconnectSeconds?: number;
        signal?: AbortSignal;
        heartbeatIntervalMs?: number;
        onReconnectError?: (error: unknown, n: number, initialSetup: boolean) => void;
    };
    ws: WebSocket | null;
    initialSetup: boolean;
    reconnects: number | null;
    constructor(opts: ClientOptions & {
        getUrl: () => Promise<string>;
        maxReconnectSeconds?: number;
        signal?: AbortSignal;
        heartbeatIntervalMs?: number;
        onReconnectError?: (error: unknown, n: number, initialSetup: boolean) => void;
    });
    [Symbol.asyncIterator](): AsyncGenerator<Uint8Array>;
    startHeartbeat(ws: WebSocket): void;
}
export default WebSocketKeepAlive;
