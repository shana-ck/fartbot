import { ChatBskyConvoDefs } from "@atproto/api";
import { EventEmitter } from "node:events";
import { setInterval } from "node:timers/promises";
import { ChatMessage } from "../struct/chat/ChatMessage.js";
export class BotChatEmitter extends EventEmitter {
    bot;
    /**
     * The interval in seconds at which the bot will poll the chat log endpoint.
     */
    pollingInterval;
    /** Used to cancel polling. */
    pollingController;
    /** The cursor to use for the next poll. */
    cursor;
    /** Whether the emitter is emitting events. */
    emitting = false;
    /**
     * @param options The options for the event emitter.
     * @param bot The active Bot instance.
     */
    constructor(options, bot) {
        super();
        this.bot = bot;
        this.pollingInterval = options.pollingInterval ?? 5;
        this.start();
    }
    /** Start polling the chat log endpoint. */
    start() {
        if (this.emitting)
            return;
        if (this.pollingController)
            this.pollingController.abort();
        this.pollingController = new AbortController();
        const interval = setInterval(this.pollingInterval * 1000, undefined, {
            signal: this.pollingController.signal,
        });
        void (async () => {
            await this.poll().catch((error) => this.emit("error", error));
            for await (const _ of interval) {
                await this.poll().catch((error) => this.emit("error", error));
            }
        })();
        this.emitting = true;
    }
    /** Stop emitting events. */
    stop() {
        this.pollingController?.abort();
        this.emitting = false;
    }
    /** Poll the chat log endpoint. */
    async poll() {
        if (!this.bot.chatProxy)
            return;
        const response = await this.bot.chatProxy.chat.bsky.convo.getLog({
            cursor: this.cursor ?? "",
        }).catch((error) => {
            this.emit("error", error);
            return { success: false };
        });
        if (!response.success) {
            this.emit("error", response);
            return;
        }
        const { cursor, logs } = response.data;
        if (cursor)
            this.cursor = cursor;
        for (const log of logs) {
            if (ChatBskyConvoDefs.isLogCreateMessage(log)) {
                const message = log.message;
                if (ChatBskyConvoDefs.isMessageView(message)) {
                    if (message.sender.did === this.bot.profile.did)
                        continue;
                    this.emit("message", ChatMessage.fromView(message, this.bot, log.convoId));
                }
                else if (ChatBskyConvoDefs.isDeletedMessageView(message)) {
                    continue;
                }
                else {
                    this.emit("error", new Error("Unknown chat message received: " + JSON.stringify(message)));
                }
            }
        }
    }
}
