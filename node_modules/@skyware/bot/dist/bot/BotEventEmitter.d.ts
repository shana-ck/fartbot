/// <reference types="node" resolution-mode="require"/>
import type { Firehose, FirehoseOptions } from "@skyware/firehose";
import { EventEmitter } from "node:events";
import type { Bot } from "./Bot.js";
/**
 * How the bot will receive and emit events.
 * @enum
 */
export declare const EventStrategy: {
    /**
     * By default, the bot will poll the notifications endpoint every `pollingInterval` seconds.
     * This is less resource-intensive than the firehose strategy, but it may take up to `pollingInterval`
     * seconds for the bot to receive new events. This strategy will not emit the `firehose` event.
     */
    Polling: string;
    /**
     * The bot will open a websocket connection to the relay and receive events in real-time.
     * This will consume more bandwidth and CPU than the polling strategy, but the bot will receive
     * events as soon as they are emitted.
     */
    Firehose: string;
};
export type EventStrategy = typeof EventStrategy[keyof typeof EventStrategy];
/** Options for the bot event emitter. */
export interface BotEventEmitterOptions {
    /**
     * How the bot will receive and emit events.
     * @default EventStrategy.Polling
     */
    strategy?: EventStrategy;
    /**
     * The interval in seconds at which the bot will poll the notifications endpoint. Only used if `strategy` is `EventStrategy.Polling`.
     * @default 5
     */
    pollingInterval?: number;
    /**
     * The Date to begin processing notifications from. Only used if `strategy` is `EventStrategy.Polling`.
     * @default new Date()
     */
    processFrom?: Date;
    /**
     * The Relay ("firehose") to connect to. Only used if `strategy` is `EventStrategy.Firehose`.
     * @default wss://bsky.network
     */
    relayUri?: string;
    /** Options to pass to the Firehose constructor. */
    firehoseOptions?: FirehoseOptions;
}
export declare class BotEventEmitter extends EventEmitter {
    protected bot: Bot;
    /** How the bot will receive and emit events. */
    private strategy;
    /**
     * The interval in seconds at which the bot will poll the notifications endpoint.
     * Only used if `strategy` is `EventStrategy.Polling`.
     */
    private pollingInterval;
    /** The timestamp of the last notification processed, if using `EventStrategy.Polling`. */
    private lastSeen?;
    /** Used to cancel polling. */
    private pollingController?;
    /** The firehose event stream. */
    firehose?: Firehose;
    /** Whether the bot is emitting events. */
    emitting: boolean;
    /**
     * @param options The options for the event emitter.
     * @param bot The active Bot instance.
     */
    constructor(options: BotEventEmitterOptions, bot: Bot);
    /** Start emitting events. */
    start(): void;
    /** Stop emitting events. */
    stop(): void;
    /** Start receiving and processing firehose events. */
    startFirehose(): void;
    /** Start polling the notifications endpoint. */
    startPolling(): void;
    /** Poll the notifications endpoint. */
    poll(): Promise<void>;
}
