import { Profile } from "./Profile.js";
/**
 * A Bluesky labeler profile.
 */
export class Labeler {
    bot;
    /** The labeler record's AT URI. */
    uri;
    /** The labeler record's CID. */
    cid;
    /** The labeler's user profile. */
    profile;
    /** The number of likes the labeler has. */
    likeCount;
    /** When the labeler was indexed by the AppView. */
    indexedAt;
    /** The label policies published by the labeler. */
    labelDefinitions;
    /** Any labels on the labeler record. */
    labels;
    /**
     * @param data Labeler data.
     * @param bot The active Bot instance.
     */
    constructor(
    // dprint-ignore
    { uri, cid, profile, likeCount, indexedAt, labelDefinitions, labels }, bot) {
        this.bot = bot;
        this.uri = uri;
        this.cid = cid;
        this.profile = profile;
        if (likeCount)
            this.likeCount = likeCount;
        this.indexedAt = indexedAt;
        this.labelDefinitions = labelDefinitions ?? [];
        this.labels = labels ?? [];
    }
    /** Subscribe to the labeler. */
    async subscribe() {
        return this.bot.addLabeler(this.profile.did);
    }
    /** Unsubscribe from the labeler. */
    async unsubscribe() {
        return this.bot.removeLabeler(this.profile.did);
    }
    /**
     * Constructs an instance from a LabelerView.
     * @param view The LabelerView to construct from.
     * @param bot The active Bot instance.
     */
    static fromView(view, bot) {
        const policies = view.policies;
        const labelDefinitions = typeof policies === "object" && policies && "labelValueDefinitions" in policies
            && Array.isArray(policies.labelValueDefinitions)
            ? policies.labelValueDefinitions
            : undefined;
        return new Labeler({
            uri: view.uri,
            cid: view.cid,
            profile: Profile.fromView(view.creator, bot),
            likeCount: view.likeCount,
            indexedAt: new Date(view.indexedAt),
            labelDefinitions,
            labels: view.labels,
        }, bot);
    }
}
